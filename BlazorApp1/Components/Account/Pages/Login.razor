@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp1.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@rendermode InteractiveServer

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-6">
        <!--FOR THIS FORM TO WORK rendermode InteractiveServer MUST BE COMMENTED OUT FOR THE FORM TO WORK-->

        @* <StatusMessage Message="@errorMessage" /> *@
        @* <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-group mb-3">
                <label for="email" class="form-label">Username</label>
                <InputText @bind-Value="Input.Email" class="form-control"
                           autocomplete="username" aria-required="true" placeholder="username" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-group mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class=" checkbox mb-3 px-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in&nbsp; <i class="fa fa-arrow-right"></i> </button>
            </div>
        </EditForm> *@
    </div>
    <div class="col-md-6">
        <section >
            <StatusMessage Message="@errorMessage" />            

            <BootstrapBlazor.Components.ValidateForm Model="Input" OnValidSubmit="@this.LoginUser">
                <EditorForm TModel="InputModel" ItemsPerRow=1 AutoGenerateAllItem=true>
                    <FieldItems>
                        <EditorItem @bind-Field=@context.Email></EditorItem>
                        <EditorItem @bind-Field=@context.Password></EditorItem>
                    </FieldItems>
                    <Buttons>
                        <Button ButtonType="ButtonType.Submit" Text="Login">

                        </Button>
                    </Buttons>
                </EditorForm>
            </BootstrapBlazor.Components.ValidateForm>

        </section>
    </div>
    
</div>

@code {
    private string? errorMessage=string.Empty;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                await Task.CompletedTask;
                // Clear the existing external cookie to ensure a clean login process
                //await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }

    public async Task LoginUser(EditContext ctx)
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
